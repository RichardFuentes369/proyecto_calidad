{"version":3,"file":"larscom-ngx-translate-module-loader.mjs","sources":["../../../projects/ngx-translate-module-loader/src/lib/module-translate-loader.ts","../../../projects/ngx-translate-module-loader/src/larscom-ngx-translate-module-loader.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport { TranslateLoader } from '@ngx-translate/core'\nimport { mergeDeepRight, reduce } from 'ramda'\nimport { forkJoin as ForkJoin, MonoTypeOperatorFunction, Observable, of } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\nimport { IModuleTranslation } from './module-translation'\nimport { IModuleTranslationOptions } from './module-translation-options'\nimport { Translation } from './translation'\n\nconst concatJson = (path: string) => path.concat('.json')\n\nconst PATH_TEMPLATE_REGEX = /{([^}]+)}/gi\nconst PATH_CLEAN_REGEX = /([^:]\\/)\\/+/gi\nconst DEFAULT_PATH_TEMPLATE = '{baseTranslateUrl}/{moduleName}/{language}'\n\nexport class ModuleTranslateLoader implements TranslateLoader {\n  private readonly defaultOptions: IModuleTranslationOptions = {\n    disableNamespace: false,\n    lowercaseNamespace: false,\n    deepMerge: true,\n    ...this.options\n  }\n\n  /**\n   * The ModuleTranslateLoader for 'ngx-translate/core'\n   *\n   * @description Fetch multiple translation files (http).\n   *\n   * @param http the HttpClient from 'angular/common'\n   * @param options the configurable options for ModuleTranslateLoader\n   *\n   * @see https://github.com/larscom/ngx-translate-module-loader\n   */\n  constructor(private readonly http: HttpClient, private readonly options: IModuleTranslationOptions) {}\n\n  public getTranslation(language: string): Observable<Translation> {\n    const { defaultOptions: options } = this\n    return this.mergeTranslations(this.getModuleTranslations(language, options), options)\n  }\n\n  private mergeTranslations(\n    moduleTranslations: Observable<Translation>[],\n    { deepMerge, translateMerger }: IModuleTranslationOptions\n  ): Observable<Translation> {\n    return ForkJoin(moduleTranslations).pipe(\n      map((translations) => {\n        return translateMerger\n          ? translateMerger(translations)\n          : deepMerge\n          ? reduce(mergeDeepRight, Object(), translations)\n          : translations.reduce((acc, curr) => ({ ...acc, ...curr }), Object())\n      })\n    )\n  }\n\n  private getModuleTranslations(language: string, options: IModuleTranslationOptions): Observable<Translation>[] {\n    const { modules } = options\n\n    return modules.map((module) => {\n      const { moduleName } = module\n      return moduleName\n        ? this.fetchTranslationForModule(language, options, module)\n        : this.fetchTranslation(language, options, module)\n    })\n  }\n\n  private fetchTranslation(\n    language: string,\n    { translateError, version, headers }: IModuleTranslationOptions,\n    { pathTemplate, baseTranslateUrl, translateMap }: IModuleTranslation\n  ): Observable<Translation> {\n    const pathOptions = Object({ baseTranslateUrl, language })\n    const template = pathTemplate || DEFAULT_PATH_TEMPLATE\n\n    const cleanedPath = concatJson(\n      template.replace(PATH_TEMPLATE_REGEX, (_, m1: string) => pathOptions[m1] || '')\n    ).replace(PATH_CLEAN_REGEX, '$1')\n\n    const path = version ? `${cleanedPath}?v=${version}` : cleanedPath\n\n    return this.http.get<Translation>(path, { headers }).pipe(\n      map((translation) => (translateMap ? translateMap(translation) : translation)),\n      this.catchError(cleanedPath, translateError)\n    )\n  }\n\n  private fetchTranslationForModule(\n    language: string,\n    { disableNamespace, lowercaseNamespace, translateError, version, headers }: IModuleTranslationOptions,\n    { pathTemplate, baseTranslateUrl, moduleName, namespace, translateMap, headers: moduleHeaders }: IModuleTranslation\n  ): Observable<Translation> {\n    const pathOptions = Object({ baseTranslateUrl, moduleName, language })\n    const template = pathTemplate || DEFAULT_PATH_TEMPLATE\n\n    const namespaceKey = namespace\n      ? namespace\n      : lowercaseNamespace\n      ? moduleName!.toLowerCase()\n      : moduleName!.toUpperCase()\n\n    const cleanedPath = concatJson(\n      template.replace(PATH_TEMPLATE_REGEX, (_, m1: string) => pathOptions[m1] || '')\n    ).replace(PATH_CLEAN_REGEX, '$1')\n\n    const path = version ? `${cleanedPath}?v=${version}` : cleanedPath\n\n    return this.http.get<Translation>(path, { headers: moduleHeaders || headers }).pipe(\n      map((translation) => {\n        return translateMap\n          ? translateMap(translation)\n          : disableNamespace\n          ? translation\n          : Object({ [namespaceKey]: translation })\n      }),\n      this.catchError(cleanedPath, translateError)\n    )\n  }\n\n  private catchError<T>(\n    path: string,\n    translateError?: (error: any, path: string) => void\n  ): MonoTypeOperatorFunction<T> {\n    return catchError((e) => {\n      if (translateError) {\n        translateError(e, path)\n      }\n\n      console.error('Unable to load translation file:', path)\n      return of(Object())\n    })\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["ForkJoin"],"mappings":"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"}